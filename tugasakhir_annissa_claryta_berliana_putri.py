# -*- coding: utf-8 -*-
"""tugasAkhir-Annissa Claryta Berliana Putri.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iacCXt-LyVuTBcKoznLEgpsxORr95WFz

# **# PROYEK ANALISIS DATA ECOMMERCE-TUGAS AKHIR(BELAJAR ANALISIS DATA DENGAN PYTHON-DICODING)**

ANNISSA CLARYTA BERLIANA PUTRI (ML-58) [M009D4KX2794] MACHINE LEARNING PATH

# BERIKUT PERTANYAAN TERKAIT PROGRAM:
1. Apa sajakah kelompok kategori barang paling tinggi frekuensi pembeliannya beserta barang paling sedikit digemari?
2. Berapakah durasi lama rata-rata pengiriman paket beserta pengiriman paket yang terlama dikirim? lalu paket dikirim dari asal mana dan hendak kemana?
3. Berapakah rata-rata pembayaran nilai dari setiap tipe-tipe transaksi?lalu transaksi bertipe apa yang frekuensinya paling sering digunakan?
4. Bagaimanakah perbandingan penjualannya dari tahun 2017 dan tahun 2018?
5. Pada bulan apakah terjadi peningkatan frekuensi penjualan tertingginya?
6. Pada hari apakah frekuensi sering terjadinya pembelian pada pembeli untuk melakukan transaksi?
"""
import streamlit as st
import streamlit.components.v1 as stc
import os
import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings("ignore")

"""# Data Wrangling
(Gathering Data)
dilakukan penggabungan data juga penghapusan kolom yang tidak akan dilakukananalisis.

mengimpor dari modul drive dari googlecollab, guna mengakses google drive. Serta memberikan akses ke google drive. Lalu dibuatlah folder 'dataset'
"""

from google.colab import drive
drive.mount('dataset')

"""pembacaan file dari customers_dataset.csv yang ada dalam folder folder "dataset" pada google drive. Lalu mencetak DataFrames yakni jumlah baris dan kolom. Kemudian menampilkan lima baris pertamanya"""

cust = pd.read_csv("/content/dataset/MyDrive/dataset/customers_dataset.csv")
print(cust.shape)
cust.head()

"""membaca file dari "order_items_dataset.csv".Lalu mencetak DataFrames yakni jumlah baris dan kolom. Kemudian menampilkan lima baris pertamanya"""

ord_itm = pd.read_csv("/content/dataset/MyDrive/dataset/order_items_dataset.csv")
print(ord_itm.shape)
ord_itm.head()

"""membaca file dari "order_payments_dataset.csv"".Lalu mencetak DataFrames yakni jumlah baris dan kolom. Kemudian menampilkan lima baris pertamanya"""

pay = pd.read_csv("/content/dataset/MyDrive/dataset/order_payments_dataset.csv")
print(pay.shape)
pay.head()

"""membaca file dari "orders_dataset.csv".Lalu mencetak DataFrames yakni jumlah baris dan kolom. Kemudian menampilkan lima baris pertamanya"""

ord = pd.read_csv("/content/dataset/MyDrive/dataset/orders_dataset.csv")
print(ord.shape)
ord.head()

"""membaca file dari "products_dataset.csv"".Lalu mencetak DataFrames yakni jumlah baris dan kolom. Kemudian menampilkan lima baris pertamanya"""

prdk = pd.read_csv("/content/dataset/MyDrive/dataset/products_dataset.csv")
print(prdk.shape)
prdk.head()

"""membaca file dari "sellers_dataset.csv".Lalu mencetak DataFrames yakni jumlah baris dan kolom. Kemudian menampilkan lima baris pertamanya"""

sllr = pd.read_csv("/content/dataset/MyDrive/dataset/sellers_dataset.csv")
sllr.head()

"""membaca file dari "product_category_name_translation.csv".Lalu mencetak DataFrames yakni jumlah baris dan kolom. Kemudian menampilkan lima baris pertamanya"""

prdk_trsltn = pd.read_csv("/content/dataset/MyDrive/dataset/product_category_name_translation.csv")
print(prdk_trsltn.shape)
prdk_trsltn.head()

"""membaca file dari "geolocation_dataset.csv".Lalu mencetak DataFrames yakni jumlah baris dan kolom. Kemudian menampilkan lima baris pertamanya"""

geoloctn = pd.read_csv("/content/dataset/MyDrive/dataset/geolocation_dataset.csv")
print(geoloctn.shape)
geoloctn.head()

"""### Kegiatan penggbungan data dalam beberapa dataframe

berikut, diketahui 2 dataframe yang akan kita digunakan yakni, `df_ord_itm` dan `ord_dataset`.
<br>
`df_ord_itm` : yg adalah penggabungan atas tabel order items, translasi produk, beserta seller. <br>
`ord_dataset` : yakni penggabungan atas tabel orders, payments, beserta customer
"""

# dilakukan penggabungan kolom produk dengan produk translasi
prdk = pd.merge(prdk, prdk_trsltn, on='product_category_name', how='left')

df_prdk = prdk[["product_id","product_category_name_english","product_category_name"]]
print(df_prdk.shape)
# df_prdk.head()
df_prdk.loc[df_prdk["product_category_name_english"].isnull()]

# lalu dilakukan penggabungan order items dengan dfproduk kemudian menjadi df order items
# ord_itm = ord_itm.drop(columns = ['shipping_limit_date'])
df_ord_itm = ord_itm.merge(df_prdk, left_on='product_id', right_on='product_id',how='left')

# setelah itu dilakukan juga penggabungan df order items dengan seller
sllr = sllr.drop(columns = ['seller_zip_code_prefix'])
df_ord_itm = df_ord_itm.merge(sllr, left_on='seller_id', right_on='seller_id',how='left')
print(df_ord_itm.shape)
df_ord_itm.head()

# Dan dilakukan juga penggabungan kolom order dengan payment
pay = pay.drop(columns = ['payment_sequential','payment_installments'])
ord = ord.merge(pay, left_on='order_id', right_on='order_id',how='left')

#selanjutnya masih dilakukan penggabungan yakni sekarang order dengan customer
cust = cust.drop(columns = ['customer_unique_id'])
ord = ord.merge(cust, left_on='customer_id', right_on='customer_id',how='left')

print(ord.shape)
ord.head()

"""## Assessing Data
yakni kegiatan melakukan suatu pemeriksaan data sebelum kita akan melakukan suatu kegiatan menganalisis data. di tahapan ini kita akan melakukan pengecekan atas tipe data, missing value, duplikat data, beserta parameter statistik.

### Melakukan penilaian atas nilai Data `df_ord_itm`
"""

df_ord_itm.info()

"""disini dapat kita lihat bahwasanya terdapat suatu tipe data yang tidak sesuai dengan yg kita inginkan, yakni kolom `shipping_limit_date` seharusnya variabel ini merupakan bertipe datetime."""

print(df_ord_itm.shape)
df_ord_itm.isnull().sum()

"""dari sini dapat kita telaah bahwasanya didapati 1627 missing value pada kolom `product_category_name_english`"""

print("Jumlah dari penduplikasinya: ", df_ord_itm.duplicated().sum())
df_ord_itm.describe()

"""dapat kita lihat tidak terdapatnya data yang terduplikasi, namun ada pula outlier atas kolom price dan freight_value.

### Penilaian Data `order`
"""

ord.info()

print(ord.shape)
ord.isnull().sum()

"""disini kita dapat telaah bahwasanya ada 175 missing value atas kolom `order_approved_at`, 1888 atas kolom `order_delivered_carrier_date`, 3132 atas kolom `order_delivered_customer_date`, 1 atas kolom `payment_type`, dan 1 atas kolom `payment_value`. missing value yang ada di kolom itu dapat terjadi dikarenakan order statusnya yg berupa 'shipped' ataupun 'canceled'."""

print("Jumlah dari penduplikasinya: ", ord.duplicated().sum())
ord.describe()

"""kita dapat lihat bahwa ada 615 baris terduplikasi dan juga outlier di kolom payment_value.

## Cleaning Data

# Pembersihan Data `df_ord_itm`
"""

#tipe data
df_ord_itm['shipping_limit_date'] = pd.to_datetime(df_ord_itm['shipping_limit_date'])
df_ord_itm.info()

# telaah missing value atas kolom product_category_name_english
x = df_ord_itm.loc[df_ord_itm["product_category_name"].notnull() & df_ord_itm["product_category_name_english"].isnull()]
set(x["product_category_name"])

"""dikarenakan pada kolom `product_category_name_english` ditelusuri ada data NaN, sedangkan adapun pada kolom `product_category_name` yg mempunyai datanya, maka dari itu kemudian data itu akan dilakukan penerjemahan yg diperuntukan guna dilakukan penggantian atas data yang isinya kosong di kolom `product_category_name_english`. adapun untuk data null lain juga akan kita lakukan  pendefinisian atas sebagai 'not defined'."""

df_ord_itm['product_category_name'].fillna('not defined', inplace=True)
df_ord_itm['product_category_name_english'].fillna('not defined', inplace=True)

df_ord_itm["product_category_name_english"] = np.where(df_ord_itm["product_category_name"] == 'pc_gamer', 'PC Gaming', df_ord_itm["product_category_name_english"])
df_ord_itm["product_category_name_english"] = np.where(df_ord_itm["product_category_name"] == 'portateis_cozinha_e_preparadores_de_alimentos', 'portable kitchen food preparers', df_ord_itm["product_category_name_english"])

#pengecekan kembali atas missing value di df_ord_itm
df_ord_itm.isnull().sum()

# dilakukan penduplikasian atas data
df_ord_itm.drop_duplicates(inplace=True)
print("Jumlah dari penduplikasinya: ", df_ord_itm.duplicated().sum())

# lalu menambahkan kolom year beserta month
# df_ord_itm['year'] = df_ord_itm['shipping_limit_date'].dt.strftime('%Y')
# df_ord_itm['month'] = df_ord_itm['shipping_limit_date'].dt.strftime('%m-%Y')
# df_ord_itm

"""### Pembersihan Data `order`"""

# memperbaiki data types
ord['order_purchase_timestamp'] = pd.to_datetime(ord['order_purchase_timestamp'])
ord['order_approved_at'] = pd.to_datetime(ord['order_approved_at'])
ord['order_delivered_carrier_date'] = pd.to_datetime(ord['order_delivered_carrier_date'])
ord['order_delivered_customer_date'] = pd.to_datetime(ord['order_delivered_customer_date'])
ord['order_estimated_delivery_date'] = pd.to_datetime(ord['order_estimated_delivery_date'])
ord['order_status'] = ord['order_status'].astype('category')

ord.info()

ord.loc[ord['order_status'] == 'shipped']

ord = ord.dropna(subset = ["payment_type","payment_value"])
print(ord.shape)
ord.isna().sum()

"""diakibatkan adanya missing value didalam table `order` yang mayooritas yakni merupakan suatu tipe data datetime yang ada sangkutannya mengenai waktu pengiriman atas paket, maka dari itu paket yang kita tahu belum sampai kepada si kurir ataupun sampai pada pelanggan akan menjadi suatu missing value. missing value ini jugapun berpengaruh kepada order_status, maka dari itu missing value atas tipe datetime tidak akan kita lakukan penghapusan."""

# duplicate data
ord = ord.drop_duplicates()
print("Jumlah dari penduplikasinya: ", ord.duplicated().sum())

# menambahkan kolom untuk EDA
ord['year'] = ord['order_purchase_timestamp'].dt.strftime('%Y')
ord['month'] = ord['order_purchase_timestamp'].dt.strftime('%m-%Y')
# df_ord_itm

ord["lama_pengiriman_hari"] = (ord["order_delivered_customer_date"] - ord["order_delivered_carrier_date"]).dt.days
ord["hari_pembelian"] = ord["order_purchase_timestamp"].dt.strftime('%A')

ord['jam_beli'] = ord['order_purchase_timestamp'].apply(lambda x: x.hour)
hours_bins = [-0.1, 6, 12, 18, 23]
hours_labels = ['Fajar', 'Pagi', 'Siang', 'Malam']
ord['waktu_saat_hari_pembelian'] = pd.cut(ord['jam_beli'], hours_bins, labels=hours_labels)

"""# Exploratory Data Analysis (EDA)
yang merupakan suatu tahapan yang berguna untuk mengenal dan mengetahui data yang akan ditangani sehingga dapat kita lakukan analisis data dengan cara yang efisien.
"""

# dilakukan pendefinisian fungsi yang akan kita digunakan untuk EDA
def range(seri):
    return seri.max() - seri.min()

"""## Mengeksplor tabel `df_ord_itm`

"""

df_ord_itm.describe(include="all")

"""dari sini dapat kita telaah bahwasanya ada range yang begitu luas di kolom price san fright_value. Atas rangkuman parameter statistik di atas kita dapat ketahui dan lihat kelompok kategori yang paling laris atau banyak dibeli adalah bed_bath_table, juga sao paulo (SP) brazil yang merupakan kota yang aktif melakukan kegiatan penjualan.

# harga dengan kategori
"""

df_ord_itm.groupby(by="product_category_name_english").agg({
    "product_id": "count", #jumlah beli
    "price": ["max", "min", "mean", range]
}).sort_values(by=("product_id", "count"), ascending=False)

"""dapat kita ketahui pada bed_bath_table, health_beauty, sports_leisure, furniture_decor, juga computers_accessories yg merupakan kelompok kategori dengan pembelian yang terbanyak. Begitupun juga dengan harga yang dijual pada Brazilian E-Commerce ini sangatlah bervasiasi bahkan jika dalam satu kategorinya, didapati range cukup besar.

### persebaran pada kota penjual
"""

df_ord_itm.groupby(by="seller_city").seller_id.nunique().sort_values(ascending=False)

"""### persebaran atas state penjual"""

df_ord_itm.groupby(by="seller_state").seller_id.nunique().sort_values(ascending=False)

"""### Mengenai seller, banyak produk, total order, beserta range price"""

df_ord_itm.groupby(by="seller_id").agg({
    "product_id": "nunique",
    "order_id": "nunique",
    "price": ["max", "min", "mean", range]
}).sort_values(by=("order_id", "nunique"), ascending=False)

"""dapat kita cermati bahwasanya pada penjualan terbaik pada umumnya ia akan memiliki banyak produk

### menelaah persebaran atas jumlah order pada setiap tahun dan juga bulannya
"""

ord.groupby(by="year").order_id.nunique()

ord.groupby(by="month").order_id.nunique()

"""dari kedua data yg kita dapati di atas, bisa kita cermati bahwa adanya suatu persebaran order yang kita ketahui yakni tidak merata dikarenakan order tersebut yakni pada tahun 2020 didapati hanya ada pada bulan februari dan juga bulan april, namun pada 2016 hanya ada di 2 bulan yakni bulan oktober dan juga bulan desember. Adapun untuk tahun 2018  yang tidak ada genap 1 tahun, yakni hanya ada di bulan januari hingga agustus  sehingga hanya tahun 2017 lah yang memiliki atas suatu data lengkap mengenai jumlah order.

## Mengeksplorasi table `order`
"""

ord.describe(include="all")

"""### menelaah dan meniilik naik turun dari penjualan padda setiap bulan 2017"""

df_ord_2017 = ord[ord['year'] == '2017']
x = df_ord_2017.groupby('month')['order_id'].nunique()
x_diff  = x.diff().fillna(0)
print(x_diff)

# dalam persentase
print("----\npersentase kenaikan dari penjualan adalah : ")
x_percentage = x.pct_change().fillna(0) * 100
x_percentage

"""diketahui dari data statistik diatas yang akan kita cermati yakni, payment value yaitu adalah terdiri atas variabel range nilai yang sangatlah luas, kita estimasikan ada suatu kesalahan di input data pada kolom order_delivered_customer_date dikarenakan nilai minimal kolom pengirimannya hanya bernilai minus. Kemudian data yang terjadi kesalahan ini akan kita lakukan penghapusan."""

ord = ord[ord["lama_pengiriman_hari"] > 0]

"""### telaah penjualan perharian dan juga bagiannya"""

ord.groupby(by="hari_pembelian").order_id.nunique().sort_values(ascending=False)

ord.groupby(by="waktu_saat_hari_pembelian").order_id.nunique().sort_values(ascending=False)

ord.groupby(["hari_pembelian", 'waktu_saat_hari_pembelian'])['order_id'].nunique().sort_values(ascending=False).reset_index()

"""dari data di atas dapat kita cermati banyaknya penjualan harian tertinggi yakni berada di hari senin, adapun penjualan yang terendah terjadi pada hari sabtu pada siang hari pada saat hari kerja yang merupakan terjadinya puncak pembelian yang dilakukan oleh konsumen.

### tipe dari pembayaran
"""

ord.groupby(by="payment_type").payment_value.mean().sort_values(ascending=False)

"""dapat kita ketahui dari sini bahwasanya pembeli yang menggunakan tipe transaksi yang berupa credit card dapat memiliki rata-rata pembayaran yang diketahui paling tinggi dibandingkan untuk tipe traksaksi lainnya adapun tipe voucher guna melakukan suatu transaksi itupun dengan rata-rata pembayaran paling kecil."""

ord.groupby(by="payment_type").order_id.nunique().sort_values(ascending=False)

"""dari sini kita tahu bahwa tipikal transaksi kartu kredit paling banyak digunakan oleh para pembeli adapun debit card yang merupakan paling sedikit digunakan dibanding dengan tipe transaksi lain.

### lamanya paket dikirim
penggunaan nilai median dikarenakan adanya outlier.
"""

ord.groupby(by="customer_city").lama_pengiriman_hari.median().sort_values(ascending=False)

# penggabungan customer dengan seller
cust = ord[["customer_city","customer_state","lama_pengiriman_hari","order_id","customer_id"]]
sllr = df_ord_itm[["order_id","seller_id","seller_city","seller_state"]]
cust_sllr = cust.merge(sllr, left_on='order_id', right_on='order_id',how='left')
cust_sllr.describe()

# penduplikasian atas data
cust_sllr = cust_sllr.drop_duplicates()
print("Jumlah dari penduplikasinya: ", cust_sllr.duplicated().sum())

# durasi lamanya pengiriman antar state
cust_sllr.groupby(['seller_state', 'customer_state'])['lama_pengiriman_hari'].median().sort_values(ascending=False).reset_index()

#durasi lamanya pengiriman antar city
cust_sllr.groupby(['seller_city', 'customer_city'])['lama_pengiriman_hari'].median().sort_values(ascending=False).reset_index()

"""# Visualisasi dan juga Penjelasan Analisis

## Penelaahan Pertanyaan Pertama: Apa sajakah kelompok kategori barang paling tinggi frekuensi pembeliannya beserta barang paling sedikit digemari
"""

df_ktgr = df_ord_itm.groupby(by="product_category_name_english")["product_id"].count().reset_index() #jumlah beli
df_ktgr = df_ktgr.rename(columns={"product_category_name_english": "Kategori", "product_id": "order"})
# df_ktgr

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(24, 6))

clr = ["#00ffff", "#808080", "#808080", "#808080", "#808080"]

sns.barplot(x="order", y="Kategori", data=df_ktgr.sort_values(by="order", ascending=False).head(5), palette=clr, ax=ax[0])
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("Kategori yang Terlaris", loc="center", fontsize=15)
ax[0].tick_params(axis ='y', labelsize=12)

sns.barplot(x="order", y="Kategori", data=df_ktgr.sort_values(by="order", ascending=True).head(5), palette=clr, ax=ax[1])
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].set_title("Kategori yang Peminatnya Sedikit", loc="center", fontsize=15)
ax[1].tick_params(axis='y', labelsize=12)

plt.suptitle("Kelompok Kategori yang Terlaris beserta Sedikitnya Peminat atas Total Pembelian", fontsize=20)
plt.show()

"""dari yang dapat kita simpulkan atas kedua grafik di atas, kita dapat mengetahui pada bed_bath_table yg merupakan kelompok katerogi yang paling banyak dibeli sadapun security dan juga service adalah ketogori yang paling sedikit dibeli.

# Telaah Pertanyaan kedua : Berapakah durasi lama rata-rata pengiriman paket beserta pengiriman paket yang terlama dikirim? lalu paket dikirim dari asal mana dan hedak kemana?

### pengiriman antar state
"""

df_krm_state = cust_sllr.groupby(['seller_state', 'customer_state'])['lama_pengiriman_hari'].mean().sort_values(ascending=False).reset_index()
df_krm_state

cmap = sns.cubehelix_palette(start=.2, rot=-.75, as_cmap=True)

plt.scatter(df_krm_state['seller_state'], df_krm_state['customer_state'], c=df_krm_state['lama_pengiriman_hari'], cmap=cmap, s=100)
plt.xlabel('State Penjual')
plt.ylabel('State Pembeli')

plt.colorbar(label='Durasi dari Pengiriman (dalam hari)')
plt.show()

sns.set(style="darkgrid")
sns.boxplot(x=df_krm_state['lama_pengiriman_hari'])
plt.show()

df_krm_state.describe()

Q1 = (df_krm_state['lama_pengiriman_hari']).quantile(0.25)
Q3 = (df_krm_state['lama_pengiriman_hari']).quantile(0.75)
IQR = Q3 - Q1

maximum = Q3 + (1.5*IQR)
maximum

df_krm_state[df_krm_state['lama_pengiriman_hari'] <= 27.69].head(1)

"""dari sini dapat kita ketahui bahwa paket antar state yang memiliki durasi paling lama dikirim yakni adalah dalam jangka waktu 138 hari, yakni dari state CE ke AM. adapun, data tersebut merupakan data yang outlier sehingga diduga terjadinya suatu error saat menginput data. Pada maximum yang tak termasuk outlier adalah 27.69 hari yakni dari state SP ke state RR.

### pengiriman yang dilakukan antar kota
"""

df_krm_city = cust_sllr.groupby(['seller_city', 'customer_city'])['lama_pengiriman_hari'].mean().sort_values(ascending=False).reset_index()
df_krm_city

sns.set(style="darkgrid")  # Mengadjust gaya untuk plot

sns.boxplot(x=df_krm_city['lama_pengiriman_hari'])
plt.show()

Q1 = (df_krm_city['lama_pengiriman_hari']).quantile(0.25)
Q3 = (df_krm_city['lama_pengiriman_hari']).quantile(0.75)
IQR = Q3 - Q1

maximum = Q3 + (1.5*IQR)
maximum

df_krm_city[df_krm_city['lama_pengiriman_hari'] <= 24.25].head(1)

"""dari data di atas kita dpaat telaah bahwa paket antar kota yang paling lama dikirim yakni ada dalam waktu 195 hari, yakni dari kota belo horizonte kepada kota montanha. Tetapi, data ini adalah data outlier jadi ada kemungkinan dapat terjadinya error saat menginput data. Adapun di hari maximum yang tak termasuk outlier guna pengiriman antarkota ialah 24.3 hari yakni dari kota sao jose dos campos kepada kota belem.

# Telaah Pertanyaan Ketiga : Berapakah rata-rata pembayaran nilai dari setiap tipe-tipe transaksi?lalu transaksi bertipe apa yang frekuensinya paling sering digunakan?
"""

df_pay = ord.groupby(by="payment_type")["payment_value"].mean().reset_index()
df_pay

plt.figure(figsize=(10, 5))

clr = ["#FFC0CB", "#808080", "#808080", "#808080"]


sns.barplot(
    x="payment_type",
    y="payment_value",
    data=df_pay.sort_values(by="payment_value", ascending = False),
    palette=clr
)
plt.title("distribusi dari pembelian atas bagian hari", loc="center", fontsize=15)
plt.ylabel("nominal transaksi")
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)
plt.show()

df_pay = ord.groupby(by="payment_type")["order_id"].nunique().reset_index()
plt_clr = sns.color_palette('pastel')

plt.pie(df_pay["order_id"], labels=df_pay["payment_type"], colors=plt_clr, autopct='%.0f%%')
plt.title("Pembayaran dari tipikal distribusi")

"""dari diagram-diagram tersebut dapat kita ketahui penggunaan kartu kredit bertipe transaksi yang paling sering frekuensinya guna transaksi yang bernilai besar dibanding jasa transaksi lain.

## Telaah Pertanyaan Keempat: Bagaimanakah perbandingan penjualannya dari tahun 2017 dan tahun 2018?

dikarenakan pada tahun 2018 hanya terdapat data sampai dengan bulan agustus dalam EDA ini, jadi perbandingan dilakukan hanya untuk bulan januari sampai agustus saja.
"""

ord['nmr_bulan'] = ord['order_purchase_timestamp'].dt.strftime('%m')
df_tgl_jual = ord.groupby(by=["nmr_bulan","year"]).order_id.nunique().reset_index()
df_tgl_jual["nmr_bulan"] = df_tgl_jual["nmr_bulan"].astype(str).astype(int)
df_tgl_jual = df_tgl_jual[df_tgl_jual["nmr_bulan"] < 9]

month_names = {
    1: 'jan',
    2: 'feb',
    3: 'mar',
    4: 'apr',
    5: 'mei',
    6: 'jun',
    7: 'jul',
    8: 'aug'
}
df_tgl_jual['nama_bulan'] = df_tgl_jual['nmr_bulan'].map(month_names)

cust_plt = ["#DDA0DD", "#6A1B9A"]
sns.catplot(x='nama_bulan', y='order_id', hue='year', data=df_tgl_jual, kind='bar', height=6, aspect=2, palette = cust_plt)
plt.ylabel("total dari order")
plt.xlabel(None)

df_thn_jual = df_tgl_jual.groupby("year").order_id.sum().reset_index()
df_thn_jual

#persentase kenaikan dari 2017 ke 2018
(51461 - 21364) / 21364 *100

"""dari kalkulasi di tahun 2018, dapat kita ketahui terjadi suatu peningkatan pembelian secara signifikan dibanding di tahun 2017 dengan angka peningkatannya 140.87%.

Telaah Pertanyaan Kelima : Pada bulan apakah terjadi peningkatan frekuensi penjualan tertingginya?
"""

df_tgl =  ord.groupby(by=["month","year"]).order_id.nunique().reset_index()
df_tgl["month"] = pd.to_datetime(df_tgl["month"], format='%m-%Y')
# df_tgl

plt.figure(figsize=(25, 9))

ax = sns.lineplot(x='month', y='order_id', data=df_tgl, estimator=None,linewidth=3)
ax.set(xticks=df_tgl.month.values)

plt.title("Tren Pertumbuhan atas Penjualan", loc="center", fontsize=18)
plt.ylabel("total dari order")
plt.xlabel(None)
ax.grid(False)
for tick in ax.get_xticklabels():
    tick.set_rotation(45)

bln_11 = ord[ord["nmr_bulan"] == '11']
bln_11 = bln_11.copy()
bln_11['tgl_hari'] = bln_11['order_purchase_timestamp'].dt.strftime('%d')
bln_11.groupby(by="tgl_hari")["order_id"].nunique().sort_values(ascending=False).reset_index()

"""dari diagram tersebut diketahui pembelian terbanyak terjadi pada bulan november di tahun 2017, khususnya di tanggal 24 November tahun 2017.

# Telaah Pertanyaan Keenam : Pada hari apakah frekuensi sering terjadinya pembelian pada pembeli untuk melakukan transaksi?
"""

df_bgn_hari = ord.groupby(by="waktu_saat_hari_pembelian")["order_id"].nunique().reset_index()
df_bgn_hari.rename(columns={
    "order_id": "total_orders"
}, inplace=True)
# df_bgn_hari

plt.figure(figsize=(10, 7))

clr = ["#98FB98", "#98FB98", "#2E7D32", "#98FB98"]

sns.barplot(
    x="waktu_saat_hari_pembelian",
    y="total_orders",
    data=df_bgn_hari.sort_values(by="total_orders"),
    palette=clr
)
plt.title("distribusi pembelian atas hari", loc="center", fontsize=15)
plt.ylabel("total dari order")
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)
plt.show()

df_hr = ord.groupby(by="hari_pembelian").order_id.nunique().sort_values(ascending=False).reset_index()
df_hr.rename(columns={
    "order_id": "total_orders"
}, inplace=True)
df_hr

plt.figure(figsize=(15, 7))

clr = ["#FFFDD0", "#FFFDD0","#FFFDD0", "#FFFDD0","#FFFDD0", "#FFFDD0", "#FF00FF"]

sns.barplot(
    x="hari_pembelian",
    y="total_orders",
    data=df_hr.sort_values(by="total_orders"),
    palette=clr
    )
plt.title("distribusi dari pembelian atas hari", loc="center", fontsize=15)
plt.ylabel("total dari order")
plt.xlabel(None)
plt.tick_params(axis='x', labelsize=12)
plt.show()

"""didapati kesimpulan atas pertanyaan di atas berdasarkan diagram batang yg telah kita buat yakni pada hari senin merupakan hari yang paling banyak digunakan oleh konsumen guna belanja serta umumnya konsumen melakukan transaksi di siang hari.

# Conclusion (Kesimpulan)
Setelah semua kalkulasi telah kita lakukan didapati:
1. **Apa sajakah kelompok kategori barang paling tinggi frekuensi pembeliannya beserta barang paling sedikit digemari?**
> Kelompok kategori yang paling diminati merupakan bed_bath_table adapun sebaliknya pada security dan service adalah kategori yang paling sedikit dibeli.

2. **Berapakah durasi lama rata-rata pengiriman paket beserta pengiriman paket yang terlama dikirim? lalu paket dikirim dari asal mana dan hedak kemana?**
> setelah melakukan kegiatan pembersihan outlier, didapati pengiriman terlama antarkota yakni adalah 24.3 hari yaitu dari kota sao jose dos campos ke kota belem. Dan untuk pengiriman antarstate yang paling lama dikirimkan adalah 27.69 hari yakni dari state SP ke state RR.

3. **Berapakah rata-rata pembayaran nilai dari setiap tipe-tipe transaksi?lalu transaksi bertipe apa yang frekuensinya paling sering digunakan?**
> didapati bahwasanya 75% konsumen menggunakan tipe transaksi kartu kredit dengan rata-rata nilai pembayarannya sebesar 163.022616.

4. **Bagaimanakah perbandingan penjualannya dari tahun 2017 dan tahun 2018?**
> Didapati di tahun 2018, terjadi peningkatan pembelian yang secara signifikan adapun tahun 2017 hanya meningkat sebesar 140.87%.

5. **Pada bulan apakah terjadi peningkatan frekuensi penjualan tertingginya?**
> Yakni pada bulan november tahun 2017 merupakan bulan dengan penjualan tertinggi, khususnya di tanggal 24/11/2017.

6. **Pada hari apakah frekuensi sering terjadinya pembelian pada pembeli untuk melakukan transaksi?**
> didapati pada hari senin merupakan hari yang paling banyak frekuensinya digunakan oleh konsumen guna berbelanja dan juga waktu yang paling aktif untuk berbelanja terjadi pada siang hari.
"""

fl_path = 'order_order.csv'
ord.to_csv(fl_path, index=False)

fl_path = 'order_dari_item.csv'
df_ord_itm.to_csv(fl_path, index=False)
